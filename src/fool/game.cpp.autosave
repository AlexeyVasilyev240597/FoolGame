#include <QObject>
#include "../abstract/CardDeck.h"
#include "../drawing/GameItems.h"
#include "../drawing/GameScene.h"
#include "Table.h"
#include "Player.h"

#include <iostream>

//later be in RULES
#define PLAYER_VOLUME_INIT 6

using namespace std;

class FOOL_GAME : public QObject{
Q_OBJECT
signals:
    void initPlayers(vector<ELEMENT*> elems);
    void initTable(vector<ELEMENT*> elems);

public:
    
    void game()
    {   
        DECK *deck = new DECK(_36_CARD_DECK);
        //deck->showDeck();
        
        //std::vector<CARD*> cards = { &deck->cards[0], &deck->cards[3], &deck->cards[6] };
        DEALER dealer(deck);
        
        //SUIT trump;
        //FOOL_PRICUP *pr = new FOOL_PRICUP(_36_CARD_DECK - PLAYER_VOLUME_INIT - PLAYER_VOLUME_INIT);
        //FOOL_BEATEN_OFF *b_off = new FOOL_BEATEN_OFF();
        //FOOL_FIGHT_FIELD *f_f = new FOOL_FIGHT_FIELD();
    
        FOOL_PLAYER *player_1 = new FOOL_PLAYER(4, f_f);//PLAYER_VOLUME_INIT, f_f);
        FOOL_PLAYER *player_2 = new FOOL_PLAYER(4, f_f);//PLAYER_VOLUME_INIT, f_f);
        
        std::vector<ELEMENT*> players = {player_1, player_2};
        //std::vector<ELEMENT*> table = {pr, b_off, f_f};
        
        
        
        dealer.getOutCards(players);
        dealer.getOutCards(table);
    
        QPoint p1(240, 0), p2(240, 560);
        player_1->initSetView(p1, 320, 200);
        player_2->initSetView(p2, 320, 200);
    
        
        emit initPlayers(players);
        //emit initTable(table);
        
        
        //game_scene.initScene(table);
    
    
        //connect(player_1, &FOOL_PLAYER::setUpdated,
        //(FOOL_PLAYER_SET_VIEW*)player_1->setView, &FOOL_PLAYER_SET_VIEW::mapUpdate);
    
       // player_1->setView->runSetView();
        //player_2->setView->runSetView();
    
        //player_1->changeFightState(ATTACK);
        //player_1->changeFightState(DEFENSE);
        //trump = pr->getTrumpSuit();
        /*
        ---later:
            dealer->connect(player_1, f_f);
            if (player_2->getDecision() == PICK_UP)
                dealer->connect(f_f, player_2);
            else if (player_2->getDecision() == BEAT_OFF)
    
    
        f_f->addToSet(player_1->giveCard());
    
        std::vector<CARD*> c = f_f->giveCard();
        if (c.empty())
            cout << "empty std::vector" << endl;
        else
            cout << c[0]->getRank() << c[0]->getSuit() << endl;
    */
        /*
        std::vector<CARD*> c_pr = pr->giveCard(2);
        std::vector<CARD*> c_b_off = b_off->giveCard(2);
        std::vector<CARD*> c_pl = player_1->giveCard();
        
        if (c_pr.empty())
            cout << "empty std::vector" << endl;
        else{
            cout << c_pr[0]->getRank() << c_pr[0]->getSuit() << endl;
            cout << c_pr[1]->getRank() << c_pr[1]->getSuit() << endl;
        }
    
        if (c_b_off.empty())
            cout << "empty std::vector" << endl;
        else{
            cout << c_b_off[0]->getRank() << c_b_off[0]->getSuit() << endl;
        }
    
        if (c_pl.empty())
            cout << "empty std::vector" << endl;
        else{
            cout << c_pl[0]->getRank() << c_pl[0]->getSuit() << endl;
        }
        */
    }
};
/*
int main(){
	game();

	return 0;
}
*/
